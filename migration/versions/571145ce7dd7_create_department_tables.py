"""create_department_tables

Revision ID: 571145ce7dd7
Revises: 7e2ee1e79cdc
Create Date: 2024-07-25 10:46:44.174378

"""

from typing import Sequence, Union
import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "571145ce7dd7"
down_revision: Union[str, None] = "7e2ee1e79cdc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute("CREATE SEQUENCE IF NOT EXISTS departments_id_seq")
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table(
        "departments",
        sa.Column(
            "id",
            sa.Integer(),
            server_default=sa.text("nextval('departments_id_seq')"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("path", sqlalchemy_utils.types.ltree.LtreeType(), nullable=False),
        sa.Column("company_id", sa.Integer(), nullable=False),
        sa.Column("manager_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.ForeignKeyConstraint(
            ["manager_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_departments_path",
        "departments",
        ["path"],
        unique=False,
        postgresql_using="gist",
    )
    op.alter_column("companies", "name", existing_type=sa.VARCHAR(), nullable=True)
    op.create_index(op.f("ix_companies_id"), "companies", ["id"], unique=False)
    op.create_unique_constraint(None, "companies", ["name"])
    op.alter_column(
        "positions", "company_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column("users", "username", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=True)
    op.alter_column(
        "users", "hashed_password", existing_type=sa.VARCHAR(), nullable=True
    )
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_constraint("users_username_key", "users", type_="unique")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.drop_constraint("users_position_id_fkey", "users", type_="foreignkey")
    op.drop_constraint("users_company_id_fkey", "users", type_="foreignkey")
    op.create_foreign_key(
        None, "users", "positions", ["position_id"], ["id"], deferrable=True
    )
    op.create_foreign_key(
        None, "users", "companies", ["company_id"], ["id"], deferrable=True
    )
    op.create_foreign_key(
        None, "users", "departments", ["department_id"], ["id"], deferrable=True
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="foreignkey")
    op.drop_constraint(None, "users", type_="foreignkey")
    op.drop_constraint(None, "users", type_="foreignkey")
    op.create_foreign_key(
        "users_company_id_fkey", "users", "companies", ["company_id"], ["id"]
    )
    op.create_foreign_key(
        "users_position_id_fkey", "users", "positions", ["position_id"], ["id"]
    )
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_unique_constraint("users_username_key", "users", ["username"])
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.alter_column(
        "users", "hashed_password", existing_type=sa.VARCHAR(), nullable=False
    )
    op.alter_column("users", "email", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column("users", "username", existing_type=sa.VARCHAR(), nullable=False)
    op.alter_column(
        "positions", "company_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_constraint(None, "companies", type_="unique")
    op.drop_index(op.f("ix_companies_id"), table_name="companies")
    op.alter_column("companies", "name", existing_type=sa.VARCHAR(), nullable=False)
    op.drop_index(
        "ix_departments_path", table_name="departments", postgresql_using="gist"
    )
    op.drop_table("departments")
    # ### end Alembic commands ###
